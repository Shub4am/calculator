{"version":3,"sources":["components/Button.jsx","components/Input.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","ClearButton","handleClear","PlusMinus","handlePosNeg","BackSpace","handleBackSpace","Input","input","window","render","ReactDOM","document","getElementById","App","addToInput","setState","state","math","slice","handleEqual","e","handleDecimal","test","handleSum","handleSubstract","handleMultiply","handleDivision","handlePercentage","this","Component","Boolean","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b2cefaa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"C\" || val === \"%\" || val === \"⌫\"; \r\n}\r\n\r\nexport const Button = props => (\r\n    <div className={`button-wrapper ${\r\n            isOperator(props.children) ? null : \"operator\"}`}\r\n                onClick={() => props.handleClick(props.children)}>\r\n                    {props.children}\r\n        </div>\r\n);\r\n\r\nexport const ClearButton = props => (\r\n    <div className=\"clear-btn\" onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport const PlusMinus = props => (\r\n    <div className=\"plus-minus\" onClick={props.handlePosNeg}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\nexport const BackSpace = props => (\r\n    <div className=\"backspace\" onClick={props.handleBackSpace}>\r\n        {props.children}\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nexport  const Input = (props) => <div className=\"input\">\r\n    {props.input}\r\n    </div>;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {Button, ClearButton, PlusMinus, BackSpace } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport * as math from \"mathjs\";\nimport ReactDOM from 'react-dom'\n\nwindow.render = () => { // calling window.render() anywhere in your components will redraw the UI w/new or updated state\n  ReactDOM.render(<App/>, document.getElementById('root'));\n}\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n    };\n  }\n  \n\n  addToInput = val => {\n    this.setState({input: this.state.input + val });\n  };\n\n  handleClear =() => {\n    this.setState({input: \"\"});\n  };\n\n  handlePosNeg = () => {\n    this.setState({input: math.evaluate(this.state.input * (-1) )});\n  };\n\n  handleBackSpace = () => {\n    this.setState({input: this.state.input.slice(0, -1)});\n  };\n\n  handleEqual = (e) => {\n    this.setState({ input: math.evaluate(this.state.input) + 0 });\n  };\n\n  handleDecimal = () => {\n    if(!(/\\./).test(this.state.input)) {\n      this.setState({input: this.state.input + '.'});\n    }\n  };\n  \n  handleSum = () => {\n    if(!(/\\+/).test(this.state.input)) {\n      this.setState({input: this.state.input + '+'});\n    }\n  };\n  \n  handleSubstract = () => {\n    if(!(/-/).test(this.state.input)) {\n      this.setState({input: this.state.input + '-'});\n    }\n  };\n  \n  handleMultiply = () => {\n    if(!(/\\*/).test(this.state.input)) {\n      this.setState({input: this.state.input + '*'});\n    }\n  };\n\n  handleDivision = () => {\n    if(!(/\\//).test(this.state.input)) {\n      this.setState({input: this.state.input + '/'});\n    }\n  };\n  \n\n  handlePercentage = () => {\n    this.setState({input: math.evaluate(this.state.input/ 100)});\n  };\n\n\n  render () {\n      return (\n      <div className=\"app\">\n          <div className=\"row\">\n            <Input input={this.state.input || \"0\"}/>\n            <ClearButton handleClear={this.handleClear}>C</ClearButton>\n            <PlusMinus handlePosNeg={this.handlePosNeg}>+/-</PlusMinus>\n            <BackSpace handleBackSpace={this.handleBackSpace}>⌫</BackSpace>\n            <Button handleClick={this.handleDivision}>/</Button>\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.handleMultiply}>*</Button>\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.handleSubstract}>-</Button>\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.handleSum}>+</Button>\n            <Button handleClick={this.handlePercentage}>%</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={this.handleDecimal}>.</Button>\n            <Button handleClick={this.handleEqual}>=</Button>\n          </div>\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}